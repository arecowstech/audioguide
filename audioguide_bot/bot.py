import logging
from os import environ

import click
from bs4 import BeautifulSoup
from dotenv import load_dotenv
from pocketbase import PocketBase, utils
from telegram import Update, constants
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

START_MSG = (
    "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –¥–æ—Ä–æ–≥–æ–π –≥–æ—Å—Ç—å!\n"
    + "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ –†–£–¢ (–ú–ò–ò–¢) –¥–ª—è –ø–æ–º–æ—â–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è–º –º—É–∑–µ—è. "
    + "–ß—Ç–æ–±—ã —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —ç–∫—Å–ø–æ–∑–∏—Ü–∏–µ–π, –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ–Ω–∞—Ç—ã. "
    + "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ –Ω–æ–º–µ—Ä –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –≤–∞—Å —ç–∫—Å–ø–æ–Ω–∞—Ç–∞ –∏ –ø–æ–ª—É—á–∏—Ç–µ –≤ –æ—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª —Å –µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏–µ–º, "
    + "–∞ —Ç–∞–∫–∂–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã."
    + "\n–ö—Ä–æ–º–µ —Ç–æ–≥–æ, –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∫ –±–æ—Ç—É –≤—ã –Ω–∞–π–¥—ë—Ç–µ —Ñ–æ—Ä–º—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏, "
    + "—á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä—É—é —Å–º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –Ω–∞—à–µ–≥–æ –∞—É–¥–∏–æ–≥–∏–¥–∞ –∏ —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è"
)

supported_tags = [
    "b",
    "strong",
    "i",
    "em",
    "u",
    "ins",
    "s",
    "strike",
    "del",
    "span",
    "tg-spoiler",
    "a",
    "tg-emoji",
    "code",
    "pre",
    "blockquote",
]

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

load_dotenv()


def remove_unsupported_tags(html, supported_tags):
    soup = BeautifulSoup(html, "html.parser")

    for tag in soup.find_all(True):
        if tag.name not in supported_tags:
            tag.unwrap()

    return str(soup)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=update.effective_chat.id, text=START_MSG)


async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE, client: PocketBase):
    try:
        post = client.collection("posts").get_first_list_item(
            f"num={str(update.message.text)}"
        )

        post_title = post.title
        post_body = post.body
        post_media = post.media
        media_caption = post.caption
        post_audio = post.audio

        logging.info(
            f"{post}\n{post_title}\n{post_body}\n{post_media}\n{media_caption}\n{post_audio}"
        )

        post_body = remove_unsupported_tags(post_body, supported_tags)
        media_caption = remove_unsupported_tags(media_caption, supported_tags)
    except utils.ClientResponseError:
        post_body = "–ü–æ—Ö–æ–∂–µ, –∑–∞–∞–ø–∏—Å–∏ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—ÄüòÖ"

    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="<b>" + post_title + "</b>",
        parse_mode=constants.ParseMode.HTML,
    )

    if post_media:
        for index, media in enumerate(post_media):
            photo = client.get_file_url(post, media, {})
            if index == 0 and media_caption:
                caption = media_caption
            else:
                caption = ""
            await context.bot.send_photo(
                chat_id=update.effective_chat.id,
                photo=photo,
                caption=caption,
                parse_mode=constants.ParseMode.HTML,
            )

    if post_audio:
        audio = client.get_file_url(post, post_audio, {})
        await context.bot.send_audio(chat_id=update.effective_chat.id, audio=audio)

    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=post_body,
        parse_mode=constants.ParseMode.HTML,
    )


@click.command()
@click.version_option()
@click.option(
    "--token",
    prompt=False,
    default=lambda: environ.get("TOKEN", ""),  # –¢–æ–∫–µ–Ω –∏–∑ —Å—Ä–µ–¥—ã –∏–ª–∏ .env
)
@click.option(
    "--api", prompt=False, default=lambda: environ.get("API", "http://127.0.0.1:8090")
)
def main(token: str, api: str) -> None:
    client = PocketBase(api)

    application = ApplicationBuilder().token(token).build()

    start_handler = CommandHandler("start", start)
    echo_handler = MessageHandler(
        filters.TEXT & (~filters.COMMAND),
        lambda update, context: echo(update, context, client),
    )

    application.add_handler(start_handler)
    application.add_handler(echo_handler)

    application.run_polling()


if __name__ == "__main__":
    main()
